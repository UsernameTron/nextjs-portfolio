// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  TECHNICAL
  EDITORIAL
}

enum PostStatus {
  DRAFT       // Still being written
  SCHEDULED   // Scheduled for future publication
  PUBLISHED   // Live on the site
  ARCHIVED    // No longer visible
}

model Post {
  id          String      @id @default(cuid())
  type        PostType    // Determines if it's technical or editorial content
  title       String
  slug        String      @unique
  content     String      @db.Text
  excerpt     String?     @db.Text
  coverImage  String?
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  tags        Tag[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?
  scheduledFor DateTime?  // When the post should be published
  status      PostStatus  @default(DRAFT)
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  
  // Technical post specific fields
  technicalMeta    TechnicalMeta?  // Only populated for TECHNICAL type
  
  // Editorial post specific fields
  editorialMeta    EditorialMeta?   // Only populated for EDITORIAL type
}

// Metadata specific to technical posts (Medium)
model TechnicalMeta {
  id              String    @id @default(cuid())
  post            Post      @relation(fields: [postId], references: [id])
  postId          String    @unique
  githubRepo      String?   // Link to related GitHub repository
  complexity      String?   // e.g., "Beginner", "Intermediate", "Advanced"
  technologies    String[]  // Array of tech stack used
  codeSnippets   Json?     // Store code snippets separately
  demoUrl        String?   // Link to live demo if applicable
}

// Metadata specific to editorial posts (Substack)
model EditorialMeta {
  id              String    @id @default(cuid())
  post            Post      @relation(fields: [postId], references: [id])
  postId          String    @unique
  topic           String    // Main topic/theme of the editorial
  stance          String?   // Author's position on the topic
  sources         Json?     // Array of reference sources
  seriesName      String?   // If part of a series
  seriesOrder     Int?      // Order in the series
}

model Tag {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String?
  posts       Post[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  image         String?
  posts         Post[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
